import concurrent.futures
import time
import random

# Function that simulates a workload
def worker_task(worker_id):
    print(f"Worker {worker_id} started.")
    # Simulate work with sleep
    work_time = random.uniform(0.5, 2.0)
    time.sleep(work_time)
    print(f"Worker {worker_id} finished in {work_time:.2f} seconds.")
    return work_time

# Function to monitor workers' performance
def monitor_workers(num_workers, tasks_per_worker):
    start_time = time.time()
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=num_workers) as executor:
        # Submit tasks to the executor
        futures = [executor.submit(worker_task, i) for i in range(num_workers * tasks_per_worker)]
        
        # Collect results
        results = [future.result() for future in concurrent.futures.as_completed(futures)]
    
    end_time = time.time()
    total_time = end_time - start_time
    average_time = sum(results) / len(results)
    
    print(f"Total time taken: {total_time:.2f} seconds")
    print(f"Average time per task: {average_time:.2f} seconds")

# Main execution
if __name__ == "__main__":
    monitor_workers(num_workers=5, tasks_per_worker=3)
